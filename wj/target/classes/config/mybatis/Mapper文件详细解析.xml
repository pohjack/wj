<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.helloworld">

<!--==========================select/update/insert/delete===========================================================  -->	
	<!--select 属性值 -->
	<!--id	在命名空间中唯一的标识符，可以被用来引用这条语句。
		parameterType	将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler推断出具体传入语句的参数，默认值为 unset。				           
		parameterMap	这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
		resultType	从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能
					是集合本身。使用 resultType 或 resultMap，但不能同时使用。
		resultMap	外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的
					情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。
		flushCache	将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
		useCache	将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
		timeout	          这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
		fetchSize	这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
		statementType	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或
						CallableStatement，默认值：PREPARED。
		resultSetType	FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
		databaseId	如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带
					的语句都有，则不带的会被忽略。
		resultOrdered	这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会
						发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。
		resultSets	这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。  -->
	<!--select元素    id:sql语句在namespace下的唯一标识；    resultMap:查询结果的返回值结果类型；       #{id}接收的动态参数-->
	<select id="selectMerchant" resultType="mm" >
		select * from b_merchant where merchant_id = #{id}
	</select>
	
	<!-- insert, update 和 delete属性 -->
	<!-- id	命名空间中的唯一标识符，可被用来代表这条语句。
		parameterType	将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
		parameterMap	这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
		flushCache	将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）。
		timeout		这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
		statementType	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，
						默认值：PREPARED。
		useGeneratedKeys	（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 
							  和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。
		keyProperty	（仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素
					设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
		keyColumn	（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要
					设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
		databaseId	如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都
					有，则不带的会被忽略。 -->
					
		<!-- selectKey子标签的属性
			keyProperty	selectKey 语句结果应该被设置的目标属性。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
			keyColumn	匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
			resultType	结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。
						如果希望作用于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。
			order	这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，设置 keyProperty 然后执行插入语句。如果设置为 AFTER，
					那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。
			statementType	与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 语句的映射类型，分别代表 PreparedStatement 
							和 CallableStatement 类型。 -->
				
		<insert id="insertAuthor">
			<selectKey keyProperty="id" resultType="int" order="BEFORE">
    			select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1
  			</selectKey>
		  insert into Author (id,username,password,email,bio)
		  values (#{id},#{username},#{password},#{email},#{bio})
		</insert>

		<update id="updateAuthor">
		  update Author set username = #{username},password = #{password},email = #{email},bio = #{bio}
		  where id = #{id}
		</update>
		
		<delete id="deleteAuthor">
		  delete from Author where id = #{id}
		</delete>


<!-- ==========================================SQL=========================================================== -->		
		<!--sql标签：用来定义可重用的 SQL 代码段，可以包含在其他语句中。它可以被静态地(在加载参数) 参数化. 不同的属性值通过包含的实例变化 
			通过property标签动态改变${alias}的值，属性值可以用于包含的refid属性或者包含的字句里面的属性值-->
		<sql id="userColumns"> ${alias}.id,${alias}.username,${alias}.password </sql>
		<select id="selectUsers" resultType="map">
 			 select
		    <include refid="userColumns"><property name="alias" value="t1"/></include>,
		    <include refid="userColumns"><property name="alias" value="t2"/></include>
		  from some_table t1
		    cross join some_table t2
		</select>
		
		<!-- 字符串替换 ，在 SQL 语句中插入一个不改变的字符串，不是通过创建PreparedStatement来set参数-->
		<select id="selectSome">
			select * from b_merchant order by ${columnName}   <!-- 注意和#{}的区别，其中columnName将会由传递进来的参数直接替换 -->
		</select>
		
		
<!--=============================================ResultMap========================================================== -->
		<!--resultMap解决列名与结果集的映射问题，同样可以使用sql列别名和开启驼峰命名来解决  -->
		<resultMap id="userResultMap" type="User">
		  <id property="id" column="user_id" />
		  <result property="username" column="user_name"/>
		  <result property="password" column="hashed_password"/>
		</resultMap>
		
		<select id="selectUsers" resultMap="userResultMap">
		  select user_id, user_name, hashed_password
		  from some_table
		  where id = #{id}
		</select>		
		
		<!--高级结果映射  -->
		<!--resultMap属性详细解析  -->
		<!--id			当前命名空间中的一个唯一标识，用于标识一个result map.
			type		类的全限定名, 或者一个类型别名 .
			autoMapping	如果设置这个属性，MyBatis将会为这个ResultMap开启或者关闭自动映射。这个属性会覆盖全局的属性autoMappingBehavior。
						默认值为：unset。
		-->
		<!--resultMap 的子元素 -->
		<!-- id & result -->
		<!--结果映射最基本内容。id 和 result 都映射一个单独列的值到简单数据类型(字符 串,整型,双精度浮点数,日期等)的单独属性或字段。 id 表示的结果将是当比较对象实例时
		用到的标识属性-->
		<!--属性值  -->
		<!--property	映射到列结果的字段或属性。如果匹配的是存在的,和给定名称相同 的 JavaBeans 的属性,那么就会使用。否则 MyBatis 将会寻找给定名称
						property 的字段。这两种情形你可以使用通常点式的复杂属性导航。
			column		从数据库中得到的列名,或者是列名的重命名标签。这也是通常和会 传递给 resultSet.getString(columnName)方法参数中相同的字符串。
			javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名 的列表) 。如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。 然而,
						如果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证所需的行为。
			jdbcType	在这个表格之后的所支持的 JDBC 类型列表中的类型。JDBC 类型是仅 仅需要对插入,更新和删除操作可能为空的列进行处理。这是 JDBC jdbcType 
						的需要,而不是 MyBatis 的。如果你直接使用 JDBC 编程,你需要指定 这个类型-但仅仅对可能为空的值。
			typeHandler	我们在前面讨论过默认的类型处理器。使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是类的完全限定名或者是一个类型处理 器的实现,或者是类型别名。 -->
		<id property="id" column="post_id"/>
		<result property="subject" column="post_subject"/>
		
		<!--构造方法 constructor :结果注入构造方法 -->
		<!-- java 构造器
			public class User{ 
				//...
				public User(int id,String userName,int age){
					//...
				}
			}
		-->
		<!--column	来自数据库的类名,或重命名的列标签。
			javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名的列表)
			jdbcType	在这个表格之前的所支持的 JDBC 类型列表中的类型。
			typeHandler	使用这个属性,你可以覆盖默认的 类型处理器。 这个属性值是类的完全限定名或者是一个类型处理器的实现, 或者是类型别名。
			select	用于加载复杂类型属性的映射语句的ID,从column中检索出来的数据，将作为此select语句的参数。
			resultMap	ResultMap的ID，可以将嵌套的结果集映射到一个合适的对象树中，功能和select属性相似，它可以实现将多表连接操作的结果映射成一个单一
						的ResultSet。这样的ResultSet将会将包含重复或部分数据重复的结果集正确的映射到嵌套的对象树中。为了实现它, MyBatis允许你 “串联” 
						ResultMap,以便解决嵌套结果集的问题。
			name	构造方法形参的名字。通过指定具体的名字你可以以任意顺序写入arg元素。参看上面的解释。从3.4.3版本起。  -->
		<constructor>
			<idArg column="id" javaType="int" name="id"/>
			<arg column="username" javaType="String" name="username" jdbcType="" resultMap="" select="" typeHandler=""/>
			<arg column="age" javaType="_int" name="age"/>   <!--name属性用于列与构造器形参匹配，不需要要求顺序与构造器的形参一致-->
		</constructor>	
		
		<!--关联 association  
			属性值：
			property，column,javaType,jdbcType,typeHandler,select ,
			fetcgType:有效值为 lazy和eager。 如果使用了，它将取代全局配置参数lazyLoadingEnabled-->
			
		<association property="author" column="blog_author_id" javaType="Author" >
		  <id property="id" column="author_id"/>
		  <result property="username" column="author_username"/>
		</association>
		
		<!--select 嵌套查询示例  -->
		<resultMap id="blogResult" type="Blog">
		  <association property="author" column="author_id" javaType="Author" select="selectAuthor"/>
		</resultMap>
		
		<select id="selectBlog" resultMap="blogResult">
		  SELECT * FROM BLOG WHERE ID = #{id}
		</select>
		
		<select id="selectAuthor" resultType="Author">
		  SELECT * FROM AUTHOR WHERE ID = #{id}
		</select>
		   
		<!-- 嵌套结果示例 -->
		<select id="selectBlog" resultMap="blogResult">
		  select
		    B.id            as blog_id,
		    B.title         as blog_title,
		    B.author_id     as blog_author_id,
		    A.id            as author_id,
		    A.username      as author_username,
		    A.password      as author_password,
		    A.email         as author_email,
		    A.bio           as author_bio
		  from Blog B left outer join Author A on B.author_id = A.id
		  where B.id = #{id}
		</select>
		
		<resultMap id="blogResult" type="Blog">
		  <id property="id" column="blog_id" />
		  <result property="title" column="blog_title"/>
		  <association property="author" column="blog_author_id" javaType="Author" resultMap="authorResult"/>
		</resultMap>
		
		<resultMap id="authorResult" type="Author">
		  <id property="id" column="author_id"/>
		  <result property="username" column="author_username"/>
		  <result property="password" column="author_password"/>
		  <result property="email" column="author_email"/>
		  <result property="bio" column="author_bio"/>
		</resultMap>
		
		<!--columnPrefix	当连接多表时，你将不得不使用列别名来避免ResultSet中的重复列名。指定columnPrefix允许你映射列名到一个外部的结果集中。。
			notNullColumn	默认情况下，子对象仅在至少一个列映射到其属性非空时才创建。 通过对这个属性指定非空的列将改变默认行为-->
		<resultMap id="blogResult" type="Blog">
		  <id property="id" column="blog_id" />
		  <result property="title" column="blog_title"/>
		  <association property="author" resultMap="authorResult" />
		  <association property="coAuthor" resultMap="authorResult" columnPrefix="co_" /><!--使用columnPrefix列名去重，服用authorResult  -->
		</resultMap>	
		
		<!-- 这种写法相比上一种写法，resultMap “Author”不能重用 -->
		<resultMap id="blogResult" type="Blog">
		  <id property="id" column="blog_id" />
		  <result property="title" column="blog_title"/>
		  <association property="author" javaType="Author">
		    <id property="id" column="author_id"/>
		    <result property="username" column="author_username"/>
		    <result property="password" column="author_password"/>
		    <result property="email" column="author_email"/>
		    <result property="bio" column="author_bio"/>
		  </association>
		</resultMap>
		
		<!-- 集合collection   private List<Post> posts-->
		<collection property="posts" ofType="domain.blog.Post">
		  <id property="id" column="post_id"/>
		  <result property="subject" column="post_subject"/>
		  <result property="body" column="post_body"/>
		</collection>
		
		<!--集合的嵌套查询  -->	
		<resultMap id="blogResult" type="Blog">
		  <collection property="posts" javaType="ArrayList" column="id" ofType="Post" select="selectPostsForBlog"/>
		</resultMap>
		
		<select id="selectBlog" resultMap="blogResult">
		  SELECT * FROM BLOG WHERE ID = #{id}
		</select>
		
		<select id="selectPostsForBlog" resultType="Post">
		  SELECT * FROM POST WHERE BLOG_ID = #{id}
		</select>
		
		<!-- 集合嵌套结果 -->
		<resultMap id="blogResult" type="Blog">
		  <id property="id" column="blog_id" />
		  <result property="title" column="blog_title"/>
		  <collection property="posts" ofType="Post">
		    <id property="id" column="post_id"/>
		    <result property="subject" column="post_subject"/>
		    <result property="body" column="post_body"/>
		  </collection>
		</resultMap>
		
		<!--鉴别器discriminator  -->
		<discriminator javaType="int" column="vehicle_type">
		    <case value="1" resultMap="carResult"/>
		    <case value="2" resultMap="truckResult"/>
		    <case value="3" resultMap="vanResult"/>
		    <case value="4" resultMap="suvResult"/>
		  </discriminator>
		  
		<!-- extends属性继承-->
		<resultMap id="vehicleResult" type="Vehicle">
		  <id property="id" column="id" />
		  <result property="vin" column="vin"/>
		  <result property="year" column="year"/>
		</resultMap>
		
		<resultMap id="carResult" type="Car">
		  <result property="doorCount" column="door_count" />
		</resultMap>
		<resultMap id="carResult" type="Car" extends="vehicleResult">   <!-- extend之后，carResult也可以设置vehicleResult的属性 -->
		  <result property="doorCount" column="door_count" />
		</resultMap>
		
		<!--上一种写法的等效写法  -->
		<resultMap id="vehicleResult" type="Vehicle">
		  <id property="id" column="id" />
		  <result property="vin" column="vin"/>
		  <result property="year" column="year"/>
		  <result property="make" column="make"/>
		  <result property="model" column="model"/>
		  <result property="color" column="color"/>
		  <discriminator javaType="int" column="vehicle_type">
		    <case value="1" resultType="carResult">
		      <result property="doorCount" column="door_count" />
		    </case>
		    <case value="2" resultType="truckResult">
		      <result property="boxSize" column="box_size" />
		      <result property="extendedCab" column="extended_cab" />
		    </case>
		    <case value="3" resultType="vanResult">
		      <result property="powerSlidingDoor" column="power_sliding_door" />
		    </case>
		    <case value="4" resultType="suvResult">
		      <result property="allWheelDrive" column="all_wheel_drive" />
		    </case>
		  </discriminator>
		</resultMap>
		
		
<!-- ==============================================Cache========================================================= -->		
		<!-- 开启二级缓存 -->
		<!-- 所起的作用：
			映射语句文件中的所有 select 语句将会被缓存。
			映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。
			缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。
			根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。
			缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。
			缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。 -->
		<cache blocking="" eviction="" flushInterval="" readOnly="" size="" type="" />
		<!--cache标签的属性值  -->
		<!--blocking:
			eviction:可回收策略：
						LRU – 最近最少使用的:移除最长时间不被使用的对象。
						FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
						SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
						WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。 
			flushInterval：(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段
			size：(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024
			readOnly：(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的
					    性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。
			type:自定义缓存的全类名(type 属 性指 定的 类必 须实现 org.mybatis.cache.Cache 接口)
				eg.<cache type="com.domain.something.MyCustomCache"/>-->
				
		<!--参照缓存 -->		
		<cache-ref namespace="com.someone.application.data.SomeMapper"/>
		
</mapper>